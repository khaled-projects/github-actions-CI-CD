name: Docker CI/CD Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  MONGO_URI: ${{ secrets.MONGO_URI }}
  MONGO_USERNAME: ${{ secrets.MONGO_USERNAME }}
  MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v4

      # Step 2: Log in to DockerHub using secrets
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Build the Docker image with versioning
      - name: Build Docker Image
        run: |
          IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.run_number }}
          docker build \
            --build-arg MONGO_URI=$MONGO_URI \
            --build-arg MONGO_USERNAME=$MONGO_USERNAME \
            --build-arg MONGO_PASSWORD=$MONGO_PASSWORD \
            -t $IMAGE_NAME .
          echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV

      # Step 4: Push the Docker image to DockerHub
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.run_number }}

  deploy:
    name: Deploy Docker Image
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Step 1: Log in to DockerHub using secrets
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 2: Pull the Docker image
      - name: Pull Docker Image
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.run_number }}

      # Step 3: Run the Docker container
      - name: Run Docker Container
        run: |
          docker run -d \
            -p 3000:3000 \
            --name my-app-container \
            ${{ secrets.DOCKER_USERNAME }}/my-app:${{ github.run_number }}
     
      # Step 4: Log Docker Container Output
      - name: Log Docker Container Output
        run: |
         docker logs my-app-container
     
      # Step 6: Test the Application and Save Response
      - name: Wait for Application to Start
        run: sleep 10
      - name: Test Application and Save Response
        run: |
          curl http://localhost:3000 > response.html

      # Step 7: Upload HTML Response as Artifact
      - name: Upload HTML Response
        uses: actions/upload-artifact@v4
        with:
          name: html-response # Name of artifact
          path: response.html # Path to the file to upload
          if-no-files-found: error # Fail the action if the file is not found
          retention-days: 7 # Retain the artifact for 7 days
          compression-level: 6 # Default compression level
          overwrite: true # Overwrite if an artifact with the same name exists
          include-hidden-files: false # Do not include hidden files   